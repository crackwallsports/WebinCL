#+TITLE: CL Web Test
#+AUTHOR: Xt3

* CL
- Prepare
  #+BEGIN_SRC lisp
(ql:quickload :caveman2)
  #+END_SRC
- Creat Project
  #+BEGIN_SRC lisp
(caveman2:make-project #P"~/.roswell/local-projects/webtest"
                       :author "Xt3")
  #+END_SRC
- Run (-> http://hostlocal:30000)
  #+BEGIN_SRC lisp
(ql:quickload :webtest)

(webtest:start :port 30000) 
;; (webtest:start :server :hunchentoot :port 8080)
;; (webtest:start :server :woo :port 8080)
(webtest:stop)
  #+END_SRC

** .asd
#+BEGIN_SRC lisp
(in-package :cl-user)
(defpackage webtest-asd
  (:use :cl :asdf))
(in-package :webtest-asd)

(defsystem webtest
  :version "0.1"
  :author "Xt3"
  :license ""
  :depends-on (:clack
               :lack
               :caveman2
               :envy
               :cl-ppcre
               :uiop
               ;; for HTML CSS JS
               :plump
               :parenscript
               :cl-interpol
               :cl-syntax-interpol
               ;; for DB
               :datafly
               )
  :components ((:module "src"
                :components
                ((:file "main" :depends-on ("config" "view" "db"))
                 (:file "web" :depends-on ("view"))
                 (:file "view" :depends-on ("config" "base"))
                 (:file "db" :depends-on ("config"))
                 (:file "base")
                 (:file "config"))))
  :description ""
  :in-order-to ((test-op (load-op webtest-test))))


#+END_SRC
** Routes
- src/web.lisp
  #+BEGIN_SRC lisp
(in-package :cl-user)
(defpackage webtest.web
  (:use :cl
        :caveman2
        :webtest.config
        :webtest.view
        :webtest.db)
  (:export :*web*))
(in-package :webtest.web)

;;
;; Application

(defclass <web> (<app>) ())
(defvar *web* (make-instance '<web>))
(clear-routing-rules *web*)

;;
;; Routing rules
;; GET / 
(defroute "/" ()
  ;; (render #P"index.html")
  (lisp-render "index" '(:title "主页")))

;; GET /login
(defroute "/login" ()
  (lisp-render "login" '(:title "登录")))

;; GET /register
(defroute "/register" ()
  (lisp-render "register" '(:title "注册")))

;; GET /home
(defroute "/home" ()
  ;; if req.session.user
  (lisp-render "home" '(:title "用户XXX"))
  ;; else -> /login
  )

;; GET /logout
(defroute "/logout" ()
  ;; -> /
  )

;;
;; Error pages
(defmethod on-exception ((app <web>) code)
  (declare (ignore app))
  "error"
  ;; (lisp-render (error-page code))
  )
  #+END_SRC
** Views
- src/view.lisp
  #+BEGIN_SRC lisp
(in-package :cl-user)
(defpackage webtest.view
  (:use :cl :webtest.base)
  (:import-from :webtest.config
                :*template-directory*)
  (:import-from :caveman2
                :*response*
                :response-headers)
  (:import-from :datafly
                :encode-json)
  (:export :lisp-render
           :render-json))
(in-package :webtest.view)


(defparameter *template-registry* (make-hash-table :test 'equal))


(defun render-json (object)
  (setf (getf (response-headers *response*) :content-type) "application/json")
  (encode-json object))

(defparameter *args* ())
(defun merge-args (us them)
  (loop for (k v) on us by #'cddr
     do (let ((p (position k them)))
          (unless (null p)
            (setf (elt them (1+ p)) v))))
  them)

(defun lisp-render (path &optional args)
  (let ((*default-pathname-defaults* *template-directory*))
    (setf *args* args)
    (load path))
  (->html
   (funcall (intern (string-upcase #?"${path}-page") :webtest.view))))

  #+END_SRC
- src/base.lisp
  #+BEGIN_SRC lisp
(in-package :cl-user)
(defpackage webtest.base
  (:use :cl)
  (:export :concat
           :join-string-list
           :make-keyword
           :->file
           :html-template
           :->html
           :->css
           :layout-template
           :doctype))
(in-package :webtest.base)


;; Help
(defmacro ppmace (macro)
  (pprint (macroexpand-1 macro)))

(defun concat (&rest rest)
  (join-string-list rest :join ""))


(defun join-string-list (ls &key (join " "))
  "list -(Concat by str)-> strings"
  (let ((str (concatenate 'string "~{~A~^" join "~}")))
    (format nil str ls)))

(defun make-keyword (name)
  (values (intern (string-upcase name) "KEYWORD")))  

(defun ->file (path f2str obj)
  (with-open-file (stream path
                          :direction :output
                          :if-exists :supersede
                          :external-format :utf-8)
    (format stream (funcall f2str obj))))

(defmacro html-template (html &optional args)
  `(let* ,(loop for (key value) on args by #'cddr
            collect (list (intern (symbol-name key)) value))
     ,html))



;; Format
(defun attribute-format
    (att &key result (att-val "~(~A~)=\"~A\"") (separator ""))
  (cond
    ((null att) "")
    ((listp att)
     (format nil result (join-string-list
                         (loop for (name value) on att by #'cddr
                            collect (format nil att-val name value))
                         :join separator)))
    (t (error "Attribute argument isn't a list"))))

(defun html-format (tag att)
  (let ((fatt (attribute-format att
                                :result " ~A"
                                :att-val "~(~A~)=\"~A\""
                                :separator " ")))
    (case tag
      ((meta br link input)
       (format nil "<~(~A~)~A>~A~%" tag fatt "~A"))
      (t
       (format nil "<~(~A~)~A>~A</~(~A~)>~%" tag fatt "~A" tag)))))

(defun css-format (sel att)
  (if (null att)
      ""
      (let ((fatt (attribute-format att
                                    :result "~A"
                                    :att-val "~%  ~(~A~): ~A"
                                    :separator ";")))
        (format nil "~(~A~) {~A~%}" sel fatt))))

(defun pc-sel (sel parent)
  (if parent
      (format nil "~A ~A" parent sel)
      sel))

;; -> HTML5 
(defun doctype (&key (type 'html5))
  (case type
    (html5 "<!DOCTYPE html>")
    (t "???")))

(defun ->html (exp)
  (cond
    ((null exp) "")
    ((listp exp)
     (if (symbolp (car exp))
         (destructuring-bind (tag &optional att &rest child) exp
           (format nil (html-format tag att)
                   (->html child)))
         (join-string-list (loop for c in exp collect (->html c)) :join "")))
    (t (format nil "~A" exp))))

;; ->CSS3
(defun ->css (exp)
  (join-string-list (l-css exp) :join "~%"))

(defun l-css (exp &optional parent)
  (cond
    ((null exp) nil)
    ((listp exp)
     (let ((head (car exp)))
       (if (or (listp head) (and (stringp head) (search "{" head)))
           (let ((ls))
             (loop for c in exp do (setf ls (nconc ls (l-css c parent))))
             ls)
           (destructuring-bind (sel &optional att &rest child) exp
             (let* ((sels (pc-sel sel parent))
                    (str (css-format sels att)))
               (if (equal str "")
                   (l-css child sels)
                   (cons str (l-css child sels))))))))
    (t (list (format nil "~A" exp)))))



;; ->Lisp
(defun html->lisp (str)
  (let ((*print-case* :downcase))
    (pprint (loop for i across (plump:children (plump:strip (plump:parse str)))
               unless (plump:comment-p i)
               collect (hl-help i)))))

(defun hl-help (node)
  (cond ((plump:text-node-p node)
         (plump:text node))
        ((plump:element-p node)
         (nconc (list (intern (string-upcase (plump:tag-name node))))
                (let ((atts))
                  (maphash #'(lambda (k v)
                               (push v atts)
                               (push (make-keyword k) atts))
                           (plump:attributes node))
                  (list atts))
                (loop for i across (plump:children node)
                   unless (plump:comment-p i)
                   collect (hl-help i))))))

;; Color
(defun random-color ()
  (concat "rgb(" (random 255) ", " (random 255) ", " (random 255) ")"))

(defparameter *css-palette*
  '((:red "#f44336") (:pink "#ff4081")
    (:purple "#aa00ff") (:indigo "#3f51b5") (:blue "#4481ff") (:lblue "#40c4ff")
    (:teal "#00897b") (:green "#00c853") (:lgreen "#b2ff59")
    (:lime "#cddc39") (:yellow "#ffea00") (:orange "#ff9100")
    (:brown "#5d4037") (:grey "#bdbdbd")))

(defun css-color (color-key)
  (second (assoc color-key *css-palette*)))

  #+END_SRC
*** Template
- layout.lisp
  #+BEGIN_SRC lisp
(in-package :webtest.view)

(defmacro layout-template ()
  ``(,,(doctype)
       (html (lang= "en")
            (head ()
                  (meta (:charset "utf-8"))
                  (meta (:name "viewport"
                               :content "width=device-width, initial-scale=1, shrink-to-fit=no"))
                  (meta (:name "description" :content "?"))
                  (meta (:name "author" :content "Xt3"))
                  (title nil ,title)
                  ,@links
                  ,@head-rest)
            (body () ,@content ,@scripts))))

  #+END_SRC
- index.lisp
  #+BEGIN_SRC lisp
(in-package :webtest.view)
(load "layout")
(interpol:enable-interpol-syntax)
(cl-syntax:use-syntax :interpol)  

(defmacro index-page-mac ()
  `(html-template
    (layout-template)
    ,(merge-args
      ,*args*
      `(:title "Index"
               :links '()
               :head-rest
               `((style ()
                       ,(->css
                         '(h1 (:color "grey")))))
               :scripts `()
               :content
               `((h1 () ,title)
                 (p () ,#?"欢迎你到 ${title}")
                 (div () 
                      (a (:href "/login") "登录")
                      (a (:href "/register") "注册")))))))

(defun index-page ()
  (index-page-mac))

  #+END_SRC
** DB
- src/db.lisp

* Copyright

Copyright (c) 2017 Xt3


